name: Release

on:
  push:
    branches: [ main ]
    paths-ignore:
      - '**.md'
      - 'LICENSE'
      - '.gitignore'

permissions:
  contents: write

env:
  CARGO_TERM_COLOR: always

jobs:
  release:
    name: Semantic Release
    runs-on: ubuntu-latest
    outputs:
      released: ${{ steps.semantic.outputs.version != '' }}
      version: ${{ steps.semantic.outputs.version }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Run Semantic Release
        id: semantic
        uses: go-semantic-release/action@v1
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          update-file: Cargo.toml
          changelog-file: CHANGELOG.md

  build-and-upload:
    name: Build and Upload Release Assets
    needs: release
    if: needs.release.outputs.released == 'true'
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: timedctl
            asset_name: timedctl-linux-amd64
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            artifact_name: timedctl
            asset_name: timedctl-linux-arm64
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: timedctl
            asset_name: timedctl-macos-amd64
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: timedctl
            asset_name: timedctl-macos-arm64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: timedctl.exe
            asset_name: timedctl-windows-amd64.exe

    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install cross-compilation tools
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu

      - name: Build
        run: cargo build --release --target ${{ matrix.target }}

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./target/${{ matrix.target }}/release/${{ matrix.artifact_name }}
          asset_name: ${{ matrix.asset_name }}
          asset_content_type: application/octet-stream
